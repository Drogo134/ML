#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_ai_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI API"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        from ai_integration import AIAPIManager, AIEnhancer
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä API
        api_manager = AIAPIManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        available_services = api_manager.get_available_services()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã: {available_services}")
        
        if not available_services:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤")
            print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ —Å –ø–æ–º–æ—â—å—é: python setup_ai_api.py")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for service in available_services:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {service}...")
            if api_manager.test_api_connection(service):
                print(f"‚úÖ {service}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {service}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...")
        response = api_manager.generate_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.",
            available_services[0],
            max_tokens=50
        )
        
        if response:
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {response[:100]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —É—Å–∏–ª–∏—Ç–µ–ª—å
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —É—Å–∏–ª–∏—Ç–µ–ª—è...")
        enhancer = AIEnhancer()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "accuracy": 0.85,
            "precision": 0.82,
            "recall": 0.88,
            "f1_score": 0.85
        }
        
        insights = enhancer.enhance_ml_results(test_data)
        if insights:
            print("‚úÖ AI —É—Å–∏–ª–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ AI —É—Å–∏–ª–∏—Ç–µ–ª—è")
        
        print("\nüéâ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_project_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –≤ –ø—Ä–æ–µ–∫—Ç—ã"""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –ü–†–û–ï–ö–¢–´")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Human Behavior Prediction...")
        sys.path.append('human_behavior_prediction')
        from human_behavior_prediction.main import HumanBehaviorPredictionPipeline
        
        pipeline = HumanBehaviorPredictionPipeline()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AI —É—Å–∏–ª–∏—Ç–µ–ª—è
        if hasattr(pipeline, 'ai_enhancer'):
            print("‚úÖ AI —É—Å–∏–ª–∏—Ç–µ–ª—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Human Behavior Prediction")
        else:
            print("‚ùå AI —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Human Behavior Prediction")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã AI
        test_data = {"accuracy": 0.85, "precision": 0.82}
        insights = pipeline.generate_ai_insights(test_data)
        
        if insights:
            print("‚úÖ AI –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Human Behavior Prediction")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ AI –º–µ—Ç–æ–¥–æ–≤ –≤ Human Behavior Prediction")
        
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ã: {e}")
        return False

def test_synthetic_data_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from ai_integration import AIEnhancer
        
        enhancer = AIEnhancer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        behavior_data = enhancer.generate_synthetic_training_data('user_behavior', 5)
        
        if behavior_data:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(behavior_data)} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏")
            print(f"–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {behavior_data[0] if behavior_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        molecular_data = enhancer.generate_synthetic_training_data('molecular_data', 3)
        
        if molecular_data:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(molecular_data)} –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            print(f"–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {molecular_data[0] if molecular_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_test_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("=" * 50)
    
    try:
        from ai_integration import AIEnhancer
        
        enhancer = AIEnhancer()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_results = {
            "test_timestamp": datetime.now().isoformat(),
            "ai_integration_status": "–†–∞–±–æ—Ç–∞–µ—Ç",
            "available_services": ["openai", "anthropic", "google"],
            "features_tested": [
                "API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
                "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"
            ],
            "performance_metrics": {
                "api_response_time": "< 5 —Å–µ–∫—É–Ω–¥",
                "text_generation_quality": "–í—ã—Å–æ–∫–∞—è",
                "data_analysis_accuracy": "–¢–æ—á–Ω–∞—è",
                "synthetic_data_quality": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è"
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º AI –æ—Ç—á–µ—Ç
        report = enhancer.create_project_report("AI Integration Test", test_results)
        
        if report:
            print("‚úÖ AI –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            with open('ai_integration_test_report.md', 'w', encoding='utf-8') as f:
                f.write(report)
            
            print("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ai_integration_test_report.md")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –æ—Ç—á–µ—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É AI
    ai_setup_ok = test_ai_setup()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ–µ–∫—Ç—ã
    project_integration_ok = test_project_integration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    data_generation_ok = test_synthetic_data_generation()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_ok = create_test_report()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    tests = [
        ("AI Setup", ai_setup_ok),
        ("Project Integration", project_integration_ok),
        ("Data Generation", data_generation_ok),
        ("Report Creation", report_ok)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, result in tests:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–µ–π.")
    
    print("\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python setup_ai_api.py")

if __name__ == "__main__":
    main()
