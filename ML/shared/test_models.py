#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import json
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
sys.path.append('human_behavior_prediction')
sys.path.append('biochemistry_molecules')
sys.path.append('small_ml_project')

from human_behavior_prediction.main import HumanBehaviorPredictionPipeline
from biochemistry_molecules.main import MolecularPropertyPredictionPipeline
from small_ml_project.main import MLPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('model_testing.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ModelTester:
    def __init__(self):
        self.test_results = {}
    
    def test_human_behavior_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ü–†–û–ì–ù–û–ó–ê –ü–û–í–ï–î–ï–ù–ò–Ø")
        logger.info("=" * 60)
        
        try:
            pipeline = HumanBehaviorPredictionPipeline()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            pipeline.load_data()
            X, y = pipeline.prepare_features('will_purchase')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            pipeline.model_trainer.load_models()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            X_train, X_val, X_test, y_train, y_val, y_test = pipeline.model_trainer.prepare_data(X, y)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
            for model_name, model in pipeline.model_trainer.models.items():
                logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if model_name == 'neural_network':
                    y_pred = (model.predict(X_test) > 0.5).astype(int)
                    y_pred_proba = model.predict(X_test)
                else:
                    y_pred = model.predict(X_test)
                    y_pred_proba = model.predict_proba(X_test)[:, 1] if hasattr(model, 'predict_proba') else None
                
                # –û—Ü–µ–Ω–∫–∞
                metrics = pipeline.evaluator.calculate_classification_metrics(y_test, y_pred, y_pred_proba)
                
                self.test_results[f'human_behavior_{model_name}'] = metrics
                
                logger.info(f"Accuracy: {metrics['accuracy']:.4f}")
                if 'auc' in metrics and metrics['auc']:
                    logger.info(f"AUC: {metrics['auc']:.4f}")
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
            return False
    
    def test_molecular_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤"""
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ú–û–õ–ï–ö–£–õ–Ø–†–ù–´–• –°–í–û–ô–°–¢–í")
        logger.info("=" * 60)
        
        try:
            pipeline = MolecularPropertyPredictionPipeline()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            pipeline.load_and_process_data('tox21')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            X_desc, y_desc = pipeline.prepare_traditional_features('NR-AR')
            X_fp, y_fp = pipeline.prepare_fingerprint_features('NR-AR')
            graphs, y_graph = pipeline.prepare_graph_data('NR-AR')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            pipeline.model_trainer.load_models()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            for model_name, model in pipeline.model_trainer.models.items():
                if not model_name.startswith('graph_'):
                    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    if 'fp' in model_name.lower():
                        X_test, y_test = X_fp, y_fp
                    else:
                        X_test, y_test = X_desc, y_desc
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    y_pred = model.predict(X_test)
                    y_pred_proba = model.predict_proba(X_test)[:, 1] if hasattr(model, 'predict_proba') else None
                    
                    # –û—Ü–µ–Ω–∫–∞
                    metrics = pipeline.evaluator.calculate_classification_metrics(y_test, y_pred, y_pred_proba)
                    
                    self.test_results[f'molecular_{model_name}'] = metrics
                    
                    logger.info(f"Accuracy: {metrics['accuracy']:.4f}")
                    if 'auc' in metrics and metrics['auc']:
                        logger.info(f"AUC: {metrics['auc']:.4f}")
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: {e}")
            return False
    
    def test_small_ml_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞–ª–æ–≥–æ ML –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ú–ê–õ–û–ì–û ML –ü–†–û–ï–ö–¢–ê")
        logger.info("=" * 60)
        
        try:
            pipeline = MLPipeline()
            
            task_types = ['classification', 'regression']
            
            for task_type in task_types:
                logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_type}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                pipeline.generate_data(task_type=task_type, n_samples=1000)
                X, y = pipeline.preprocess_data()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                pipeline.model_trainer.load_models()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                X_train, X_val, X_test, y_train, y_val, y_test = pipeline.model_trainer.prepare_data(X, y, task_type=task_type)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
                for model_name, model in pipeline.model_trainer.models.items():
                    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    if model_name == 'neural_network':
                        if task_type == 'classification':
                            y_pred = (model.predict(X_test) > 0.5).astype(int)
                            y_pred_proba = model.predict(X_test)
                        else:
                            y_pred = model.predict(X_test)
                            y_pred_proba = None
                    else:
                        y_pred = model.predict(X_test)
                        y_pred_proba = model.predict_proba(X_test)[:, 1] if hasattr(model, 'predict_proba') else None
                    
                    # –û—Ü–µ–Ω–∫–∞
                    if task_type == 'classification':
                        metrics = pipeline.evaluator.calculate_classification_metrics(y_test, y_pred, y_pred_proba)
                    else:
                        metrics = pipeline.evaluator.calculate_regression_metrics(y_test, y_pred)
                    
                    self.test_results[f'small_ml_{task_type}_{model_name}'] = metrics
                    
                    if task_type == 'classification':
                        logger.info(f"Accuracy: {metrics['accuracy']:.4f}")
                        if 'auc' in metrics and metrics['auc']:
                            logger.info(f"AUC: {metrics['auc']:.4f}")
                    else:
                        logger.info(f"MSE: {metrics['mse']:.4f}")
                        logger.info(f"R¬≤: {metrics['r2']:.4f}")
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞–ª–æ–≥–æ ML –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –º–∞–ª–æ–≥–æ ML –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô")
        logger.info("=" * 80)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        self.test_human_behavior_models()
        self.test_molecular_models()
        self.test_small_ml_models()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_test_report()
        
        logger.info("=" * 80)
        logger.info("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info("=" * 80)
    
    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        report = f"""
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π ML
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

"""
        
        for model_name, metrics in self.test_results.items():
            report += f"### {model_name}\n"
            for metric, value in metrics.items():
                if isinstance(value, float):
                    report += f"- {metric}: {value:.4f}\n"
                else:
                    report += f"- {metric}: {value}\n"
            report += "\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('model_test_report.md', 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ model_test_report.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ModelTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
