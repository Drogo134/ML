#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI API –∫–ª—é—á–µ–π
"""

import os
import json
import getpass
from ai_integration import AIAPIManager

def setup_api_keys():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π"""
    print("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê AI API –ö–õ–Æ–ß–ï–ô")
    print("=" * 50)
    
    api_manager = AIAPIManager()
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services = {
        'openai': 'OpenAI (GPT-3.5, GPT-4)',
        'anthropic': 'Anthropic (Claude)',
        'google': 'Google (Gemini)',
        'huggingface': 'Hugging Face',
        'cohere': 'Cohere',
        'replicate': 'Replicate',
        'stability': 'Stability AI',
        'midjourney': 'Midjourney',
        'custom': '–ö–∞—Å—Ç–æ–º–Ω—ã–π API'
    }
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã:")
    for i, (key, name) in enumerate(services.items(), 1):
        print(f"{i}. {name} ({key})")
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3):")
    choices = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞: ").strip()
    
    if not choices:
        print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
        return
    
    try:
        selected_indices = [int(x.strip()) - 1 for x in choices.split(',')]
        selected_services = [list(services.keys())[i] for i in selected_indices if 0 <= i < len(services)]
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        return
    
    print(f"\n–í—ã–±—Ä–∞–Ω—ã —Å–µ—Ä–≤–∏—Å—ã: {[services[s] for s in selected_services]}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    for service in selected_services:
        print(f"\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {services[service]} ---")
        
        if service == 'custom':
            url = input("–í–≤–µ–¥–∏—Ç–µ URL API: ").strip()
            if url:
                api_manager.update_api_key('custom_api_url', url)
            
            key = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á: ").strip()
            if key:
                api_manager.update_api_key('custom_api_key', key)
        else:
            key = getpass.getpass(f"–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è {services[service]}: ").strip()
            if key:
                api_manager.update_api_key(f'{service}_api_key', key)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
    print("=" * 30)
    
    for service in selected_services:
        if service == 'custom':
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π API
        
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {services[service]}...")
        if api_manager.test_api_connection(service):
            print(f"‚úÖ {services[service]}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå {services[service]}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    api_manager.save_api_keys()
    print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ai_api_config.json")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    available_services = api_manager.get_available_services()
    if available_services:
        print(f"\nüéâ –î–æ—Å—Ç—É–ø–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã: {', '.join(available_services)}")
    else:
        print("\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤")

def test_ai_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 40)
    
    api_manager = AIAPIManager()
    available_services = api_manager.get_available_services()
    
    if not available_services:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
    for service in available_services:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {service}...")
        
        response = api_manager.generate_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.",
            service,
            max_tokens=50
        )
        
        if response:
            print(f"‚úÖ {service}: {response[:100]}...")
        else:
            print(f"‚ùå {service}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    test_data = {
        "accuracy": 0.85,
        "precision": 0.82,
        "recall": 0.88,
        "f1_score": 0.85
    }
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...")
    analysis = api_manager.analyze_data_with_ai(
        test_data, 'ml_results', available_services[0]
    )
    
    if analysis:
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {analysis[:200]}...")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

def show_api_status():
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ API"""
    print("\nüìä –°–¢–ê–¢–£–° AI API")
    print("=" * 30)
    
    api_manager = AIAPIManager()
    available_services = api_manager.get_available_services()
    
    if available_services:
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {', '.join(available_services)}")
        
        for service in available_services:
            if api_manager.test_api_connection(service):
                print(f"  ‚úÖ {service}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            else:
                print(f"  ‚ùå {service}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    else:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ —Å –ø–æ–º–æ—â—å—é: python setup_ai_api.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ AI API SETUP TOOL")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == '1':
            setup_api_keys()
        elif choice == '2':
            test_ai_integration()
        elif choice == '3':
            show_api_status()
        elif choice == '4':
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    main()
