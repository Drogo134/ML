#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import os
import sys
import json
import time
import logging
import schedule
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
sys.path.append('human_behavior_prediction')
sys.path.append('biochemistry_molecules')
sys.path.append('small_ml_project')

from train_models import ModelTrainer
from incremental_training import IncrementalTrainer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduled_training.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ScheduledTrainer:
    def __init__(self):
        self.config = {
            'full_training_interval': 'weekly',  # daily, weekly, monthly
            'incremental_training_interval': 'daily',  # hourly, daily
            'incremental_cycles': 2,
            'new_samples': 1000,
            'auto_retrain_threshold': 0.05,  # 5% —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            'max_retries': 3
        }
        self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if os.path.exists('training_config.json'):
            with open('training_config.json', 'r') as f:
                self.config.update(json.load(f))
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open('training_config.json', 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def check_model_performance(self, project_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            if project_name == 'human_behavior':
                from human_behavior_prediction.main import HumanBehaviorPredictionPipeline
                pipeline = HumanBehaviorPredictionPipeline()
                pipeline.model_trainer.load_models()
                
                if not pipeline.model_trainer.models:
                    return None
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                pipeline.load_data()
                X, y = pipeline.prepare_features('will_purchase')
                X_train, X_val, X_test, y_train, y_val, y_test = pipeline.model_trainer.prepare_data(X, y)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                performance = pipeline.model_trainer.evaluate_all_models(X_test, y_test)
                
                return performance
            
            elif project_name == 'molecular':
                from biochemistry_molecules.main import MolecularPropertyPredictionPipeline
                pipeline = MolecularPropertyPredictionPipeline()
                pipeline.model_trainer.load_models()
                
                if not pipeline.model_trainer.models:
                    return None
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                pipeline.load_and_process_data('tox21')
                X_desc, y_desc = pipeline.prepare_traditional_features('NR-AR')
                X_train, X_val, X_test, y_train, y_val, y_test = pipeline.model_trainer.prepare_data(X_desc, y_desc)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                performance = pipeline.model_trainer.evaluate_all_models(X_test, y_test)
                
                return performance
            
            elif project_name == 'small_ml':
                from small_ml_project.main import MLPipeline
                pipeline = MLPipeline()
                pipeline.model_trainer.load_models()
                
                if not pipeline.model_trainer.models:
                    return None
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                pipeline.generate_data(task_type='classification', n_samples=1000)
                X, y = pipeline.preprocess_data()
                X_train, X_val, X_test, y_train, y_val, y_test = pipeline.model_trainer.prepare_data(X, y)
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                performance = pipeline.model_trainer.evaluate_all_models(X_test, y_test)
                
                return performance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {project_name}: {e}")
            return None
    
    def needs_retraining(self, project_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            history_file = f'{project_name}_performance_history.json'
            if not os.path.exists(history_file):
                return True  # –ü–µ—Ä–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            
            with open(history_file, 'r') as f:
                history = json.load(f)
            
            if not history or len(history) < 2:
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            current_performance = self.check_model_performance(project_name)
            if not current_performance:
                return True
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            last_performance = history[-1]['performance']
            
            for model_name, current_metrics in current_performance.items():
                if model_name in last_performance:
                    last_metrics = last_performance[model_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if 'accuracy' in current_metrics and 'accuracy' in last_metrics:
                        accuracy_drop = last_metrics['accuracy'] - current_metrics['accuracy']
                        if accuracy_drop > self.config['auto_retrain_threshold']:
                            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ {model_name}: {accuracy_drop:.4f}")
                            return True
                    
                    if 'mse' in current_metrics and 'mse' in last_metrics:
                        mse_increase = current_metrics['mse'] - last_metrics['mse']
                        if mse_increase > self.config['auto_retrain_threshold']:
                            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ MSE {model_name}: {mse_increase:.4f}")
                            return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è {project_name}: {e}")
            return True
    
    def save_performance_history(self, project_name, performance):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        history_file = f'{project_name}_performance_history.json'
        
        if os.path.exists(history_file):
            with open(history_file, 'r') as f:
                history = json.load(f)
        else:
            history = []
        
        history.append({
            'timestamp': datetime.now().isoformat(),
            'performance': performance
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –∑–∞–ø–∏—Å—è–º–∏
        if len(history) > 50:
            history = history[-50:]
        
        with open(history_file, 'w') as f:
            json.dump(history, f, indent=2)
    
    def full_training_job(self):
        """–ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üîÑ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ")
        
        try:
            trainer = ModelTrainer()
            success = trainer.run_full_training()
            
            if success:
                logger.info("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    def incremental_training_job(self):
        """–ó–∞–¥–∞—á–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üîÑ –ó–ê–ü–£–°–ö –ò–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ")
        
        try:
            trainer = IncrementalTrainer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            projects = ['human_behavior', 'molecular', 'small_ml']
            
            for project in projects:
                if self.needs_retraining(project):
                    logger.info(f"–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è {project}")
                    
                    if project == 'human_behavior':
                        trainer.incremental_behavior_training(
                            new_samples=self.config['new_samples'],
                            cycles=self.config['incremental_cycles']
                        )
                    elif project == 'molecular':
                        trainer.incremental_molecular_training(
                            new_samples=self.config['new_samples'],
                            cycles=self.config['incremental_cycles']
                        )
                    elif project == 'small_ml':
                        trainer.incremental_small_ml_training(
                            new_samples=self.config['new_samples'],
                            cycles=self.config['incremental_cycles']
                        )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    performance = self.check_model_performance(project)
                    if performance:
                        self.save_performance_history(project, performance)
                else:
                    logger.info(f"–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {project}")
            
            logger.info("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    def health_check_job(self):
        """–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            projects = ['human_behavior', 'molecular', 'small_ml']
            
            for project in projects:
                models_dir = Path(f'{project}/models')
                if not models_dir.exists() or not list(models_dir.glob('*')):
                    logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {project}")
                else:
                    logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {project}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
            import shutil
            free_space = shutil.disk_usage('.').free / (1024**3)  # GB
            if free_space < 1:
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_space:.2f} GB")
            else:
                logger.info(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_space:.2f} GB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            log_files = ['training.log', 'incremental_training.log', 'scheduled_training.log']
            for log_file in log_files:
                if os.path.exists(log_file):
                    with open(log_file, 'r') as f:
                        content = f.read()
                        if 'ERROR' in content or 'CRITICAL' in content:
                            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ {log_file}")
            
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è...")
        
        # –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        if self.config['full_training_interval'] == 'daily':
            schedule.every().day.at("02:00").do(self.full_training_job)
        elif self.config['full_training_interval'] == 'weekly':
            schedule.every().monday.at("02:00").do(self.full_training_job)
        elif self.config['full_training_interval'] == 'monthly':
            schedule.every().month.do(self.full_training_job)
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        if self.config['incremental_training_interval'] == 'hourly':
            schedule.every().hour.do(self.incremental_training_job)
        elif self.config['incremental_training_interval'] == 'daily':
            schedule.every().day.at("01:00").do(self.incremental_training_job)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        schedule.every().day.at("00:00").do(self.health_check_job)
        
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
        logger.info(f"- –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {self.config['full_training_interval']}")
        logger.info(f"- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {self.config['incremental_training_interval']}")
        logger.info("- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø")
        logger.info("=" * 60)
        
        self.setup_schedule()
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    def run_once(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –û–î–ù–û–†–ê–ó–û–í–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        projects = ['human_behavior', 'molecular', 'small_ml']
        
        for project in projects:
            if self.needs_retraining(project):
                logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {project}")
                
                if project == 'human_behavior':
                    trainer = IncrementalTrainer()
                    trainer.incremental_behavior_training(
                        new_samples=self.config['new_samples'],
                        cycles=self.config['incremental_cycles']
                    )
                elif project == 'molecular':
                    trainer = IncrementalTrainer()
                    trainer.incremental_molecular_training(
                        new_samples=self.config['new_samples'],
                        cycles=self.config['incremental_cycles']
                    )
                elif project == 'small_ml':
                    trainer = IncrementalTrainer()
                    trainer.incremental_small_ml_training(
                        new_samples=self.config['new_samples'],
                        cycles=self.config['incremental_cycles']
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                performance = self.check_model_performance(project)
                if performance:
                    self.save_performance_history(project, performance)
            else:
                logger.info(f"–û–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {project}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ML')
    parser.add_argument('--mode', choices=['schedule', 'once'], default='once',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: schedule (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é) –∏–ª–∏ once (–æ–¥–∏–Ω —Ä–∞–∑)')
    parser.add_argument('--config', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    trainer = ScheduledTrainer()
    
    if args.config:
        with open(args.config, 'r') as f:
            config = json.load(f)
            trainer.config.update(config)
            trainer.save_config()
    
    if args.mode == 'schedule':
        trainer.run_scheduler()
    else:
        trainer.run_once()

if __name__ == "__main__":
    main()
